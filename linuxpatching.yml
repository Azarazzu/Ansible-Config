---
- name: Patch RHEL Servers
  hosts: all
  vars:
    exclude_packages: "{{ exclude.split(',') }}"

  tasks:
    - name: upgrade all packages (yum)
      yum:
        name: '*'
        state: latest
        exclude: "{{ exclude_packages }}"
      when: ansible_pkg_mgr == "yum"
      register: patchingresult

    - name: upgrade all packages (dnf)
      dnf:
        name: '*'
        state: latest
        exclude: "{{ exclude_packages }}"
      when: ansible_pkg_mgr == "dnf"
      register: patchingresultdnf

    - name: Check to see if we need a reboot
      command: needs-restarting -r
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
      check_mode: no

    - name: Reboot Server if Necessary
      reboot:
      when: result.rc == 1

    - name: Set patching data for ServiceNow Yum if patching happened
      set_stats:
        data:
          work_notes: "[code]<h3>{{ inventory_hostname }}</h3>[/code] {{ patchingresult.changes.updated | flatten(levels=1) | to_nice_json }}"
          expose_to_cloud_redhat_com_results: "{{ inventory_hostname }}:{{ patchingresult.changes.updated | flatten(levels=1) | to_nice_json }}"
          results: "{{ patchingresult.changes.updated | flatten | to_nice_json }}"
      when: ansible_pkg_mgr == "yum" and patchingresult.changes.updated is defined

    - name: Set patching data for ServiceNow Yum if system already patched
      set_stats:
        data:
          work_notes: "[code]<h3>{{ inventory_hostname }}</h3>[/code] {{ patchingresult.results | to_nice_json }}"
          expose_to_cloud_redhat_com_results: "{{ inventory_hostname }}:{{ patchingresult.results| to_nice_json }}"
          results: "{{ patchingresult.results| to_nice_json }}"
      when: ansible_pkg_mgr == "yum" and patchingresult.changes.updated is not defined

    - name: Set patching data for ServiceNow DNF
      set_stats:
        data:
          work_notes: "[code]<h3>{{ inventory_hostname }}</h3>[/code] {{ patchingresultdnf.results | flatten(levels=1)| to_nice_json }}"
          expose_to_cloud_redhat_com_results: "{{ inventory_hostname }}:{{ patchingresultdnf.results | flatten(levels=1) | to_nice_json }}"
          results: "{{ patchingresultdnf.results | flatten | to_nice_json }}"
      when: ansible_pkg_mgr == "dnf" and patchingresultdnf.results is defined

    

- name: Build patching report
  hosts: report.shadowman.dev
  tasks:

    - name: build a report
      include_role:
        name: shadowman.reports.build_report_linux_patch
