---

- name: get results
  ansible.builtin.slurp:
    src: './report.xml'
  register: scap_report_file

- name: set report facts
  ansible.builtin.set_fact:
    openscap_scan_results:
      benchmark_id: "{{ test_result['benchmark']['@id'] }}"
      total_rules_count: "{{ rule_result | length }}"
      score: "{{ test_result['score']['#text'] }}%"
      rule_results_count:
        notchecked: "{{ rule_result | json_query('@[?result==`notchecked`]') | length }}"
        fixed: "{{ rule_result | json_query('@[?result==`fixed`]') | length }}"
        error: "{{ rule_result | json_query('@[?result==`error`]') | length }}"
        notapplicable: "{{ rule_result | json_query('@[?result==`notapplicable`]') | length }}"
        informational: "{{ rule_result | json_query('@[?result==`informational`]') | length }}"
        unknown: "{{ rule_result | json_query('@[?result==`unknown`]') | length }}"
        fail: "{{ rule_result | json_query('@[?result==`fail`]') | length }}"
        pass: "{{ rule_result | json_query('@[?result==`pass`]') | length }}"
      severity_of_failed_rules_count:
        low: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'low') | list | length }}"
        medium: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'medium') | list | length }}"
        high: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'high') | list | length }}"
      failed_rules: "{{ rule_result | json_query('@[?result==`fail`]') }}"
    cacheable: True
  vars:
    report_from_xml: "{{ scap_report_file['content'] | b64decode | ansible.utils.from_xml | replace('{http://checklists.nist.gov/xccdf/1.2}','') }}"
    test_result: "{{ report_from_xml['Benchmark']['TestResult'] }}"
    rule_result: "{{ test_result['rule-result'] }}"

# we set the security_compliance based on some condition
# in real world, you can have additional conditions
- name: set security compliance status
  ansible.builtin.set_fact:
    security_compliance:
      status: "{{ true if ((openscap_scan_results.severity_of_failed_rules_count.high|int) < 10) else false }}"
      type: "{{ content_profile }}"
    cacheable: True

- name: Copy files to Tower host
  ansible.builtin.fetch:
    src: ./{{ item }}
    dest: "/tmp/{{ inventory_hostname }}/{{ item }}"
    flat: true
  loop:
    - report.xml
    - index.html

- name: Copy folders to reports host
  ansible.builtin.copy:
    src: "/tmp/{{ inventory_hostname }}"
    dest: "{{ file_path }}"
    owner: root
    group: root
    mode: '0644'
  delegate_to: report.shadowman.dev

- name: DISPLAY LINK TO INVENTORY REPORT
  ansible.builtin.debug:
    msg: "http://report.shadowman.dev/openscap/{{ inventory_hostname }}"

- name: Template report
  ansible.builtin.template:
    src: "scan_reports.html.j2"
    dest: "{{ file_path }}/summary/index.html"
    owner: root
    group: root
    mode: '0644'
  delegate_to: report.shadowman.dev
  run_once: true

- name: Send Report via E-mail
  community.general.mail:
    host: "{{ EMAIL_HOST }}"
    username: "{{ EMAIL_USERNAME }}"
    password: "{{ EMAIL_PASSWORD }}"
    port: "{{ EMAIL_PORT }}"
    subject: "Linux Patching Report"
    body: "{{ lookup('template', 'report.j2') }}"
    from: "{{ EMAIL_FROM }}"
    to: "{{ EMAIL_TO }}"
    subtype: html
  delegate_to: localhost  
  become: false
  when: sendemailreport

